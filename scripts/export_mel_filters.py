"""
🍉 수박 당도 예측 ML 프로젝트 - Mel 필터 Export 스크립트
Swift와 Python 간 동일한 mel 필터뱅크 사용을 위한 필터 추출 및 변환
"""

import numpy as np
import librosa
import json
from pathlib import Path
import sys
import os

# 프로젝트 루트 경로 설정
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from src.data.feature_extractor import AudioFeatureExtractor

def export_mel_filters():
    """
    librosa와 동일한 mel 필터뱅크를 Swift에서 사용할 수 있도록 export
    """
    # 설정 (feature_extractor와 동일하게)
    extractor = AudioFeatureExtractor()
    config = extractor.config['features']['mel_spectrogram']
    
    sr = 22050  # 서버에서 사용하는 sample rate
    n_fft = config['n_fft']
    n_mels = config['n_mels']
    fmin = config['fmin']
    fmax = config['fmax']
    
    print(f"🔧 Mel 필터 설정:")
    print(f"  - Sample Rate: {sr}")
    print(f"  - FFT Size: {n_fft}")
    print(f"  - Mel Bins: {n_mels}")
    print(f"  - Frequency Range: {fmin} - {fmax} Hz")
    
    # librosa mel 필터 생성
    mel_filter = librosa.filters.mel(
        sr=sr, 
        n_fft=n_fft, 
        n_mels=n_mels, 
        fmin=fmin, 
        fmax=fmax,
        htk=False,  # Slaney 방식 사용
        norm='slaney'  # Slaney normalization
    )
    
    print(f"  - 생성된 필터 shape: {mel_filter.shape}")
    
    # exports 디렉토리 생성
    exports_dir = project_root / "exports"
    exports_dir.mkdir(exist_ok=True)
    
    # 1. NumPy 형태로 저장
    np.save(exports_dir / "mel_filter.npy", mel_filter)
    print(f"✅ NumPy 파일 저장: {exports_dir / 'mel_filter.npy'}")
    
    # 2. 텍스트 형태로 저장
    with open(exports_dir / "mel_filter.txt", "w") as f:
        f.write(f"# Mel Filter Bank\n")
        f.write(f"# Shape: {mel_filter.shape}\n")
        f.write(f"# Sample Rate: {sr}\n")
        f.write(f"# FFT Size: {n_fft}\n")
        f.write(f"# Mel Bins: {n_mels}\n")
        f.write(f"# Frequency Range: {fmin} - {fmax} Hz\n\n")
        
        for i, mel_bin in enumerate(mel_filter):
            f.write(f"# Mel bin {i}\n")
            f.write(",".join([f"{val:.8f}" for val in mel_bin]))
            f.write("\n")
    
    print(f"✅ 텍스트 파일 저장: {exports_dir / 'mel_filter.txt'}")
    
    # 3. Swift 코드로 변환
    generate_swift_code(mel_filter, sr, n_fft, n_mels, fmin, fmax, exports_dir)
    
    # 4. JSON 형태로 저장 (메타데이터 포함)
    filter_data = {
        "metadata": {
            "sample_rate": sr,
            "n_fft": n_fft,
            "n_mels": n_mels,
            "fmin": fmin,
            "fmax": fmax,
            "htk": False,
            "norm": "slaney",
            "shape": mel_filter.shape
        },
        "filter_bank": mel_filter.tolist()
    }
    
    with open(exports_dir / "mel_filter.json", "w") as f:
        json.dump(filter_data, f, indent=2)
    
    print(f"✅ JSON 파일 저장: {exports_dir / 'mel_filter.json'}")
    
    # 5. 필터 검증
    verify_mel_filters(mel_filter, sr, n_fft, n_mels)

def generate_swift_code(mel_filter, sr, n_fft, n_mels, fmin, fmax, exports_dir):
    """
    Swift에서 사용할 수 있는 코드 생성
    """
    swift_code = f'''//
//  MelFilterBank.swift
//  수박 당도 예측 앱
//
//  Python librosa와 동일한 mel 필터뱅크
//  Generated by 6_export_mel_filters.py
//

import Foundation
import Accelerate

class MelFilterBank {{
    
    // MARK: - 설정
    static let sampleRate: Int = {sr}
    static let fftSize: Int = {n_fft}
    static let melBins: Int = {n_mels}
    static let fmin: Float = {fmin}
    static let fmax: Float = {fmax if fmax else sr // 2}
    
    // MARK: - Mel 필터 뱅크 (librosa와 동일)
    static let melFilterBank: [[Float]] = [
'''
    
    # 필터 데이터 추가
    for i, mel_bin in enumerate(mel_filter):
        swift_code += f"        ["
        swift_code += ", ".join([f"{val:.8f}" for val in mel_bin])
        swift_code += "]"
        if i < len(mel_filter) - 1:
            swift_code += ","
        swift_code += "\n"
    
    swift_code += f'''    ]
    
    // MARK: - Mel 스펙트로그램 계산
    static func applyMelFilter(powerSpectrum: [Float]) -> [Float] {{
        guard powerSpectrum.count >= fftSize / 2 + 1 else {{
            return Array(repeating: 0.0, count: melBins)
        }}
        
        var melSpectrum = [Float](repeating: 0.0, count: melBins)
        
        for (melIndex, filterCoeffs) in melFilterBank.enumerated() {{
            var sum: Float = 0.0
            
            for (freqIndex, coeff) in filterCoeffs.enumerated() {{
                if freqIndex < powerSpectrum.count {{
                    sum += coeff * powerSpectrum[freqIndex]
                }}
            }}
            
            melSpectrum[melIndex] = sum
        }}
        
        return melSpectrum
    }}
    
    // MARK: - 검증용 함수
    static func getFilterShape() -> (Int, Int) {{
        return (melBins, fftSize / 2 + 1)
    }}
    
    static func getFrequencyBins() -> [Float] {{
        let freqStep = Float(sampleRate) / Float(fftSize)
        return (0..<(fftSize / 2 + 1)).map {{ Float($0) * freqStep }}
    }}
    
    static func getMelFrequencies() -> [Float] {{
        let melMin = 2595.0 * log10(1.0 + fmin / 700.0)
        let melMax = 2595.0 * log10(1.0 + fmax / 700.0)
        let melStep = (melMax - melMin) / Float(melBins + 1)
        
        return (0..<(melBins + 2)).map {{ melIndex in
            let mel = melMin + Float(melIndex) * melStep
            return 700.0 * (pow(10.0, mel / 2595.0) - 1.0)
        }}
    }}
}}

// MARK: - 사용 예시
/*
// FFT 후 파워 스펙트럼 계산
let powerSpectrum = calculatePowerSpectrum(fftResult)

// Mel 필터 적용
let melSpectrum = MelFilterBank.applyMelFilter(powerSpectrum: powerSpectrum)

// 로그 변환
let logMelSpectrum = melSpectrum.map {{ max(log10($0 + 1e-10), -10.0) }}
*/
'''
    
    # Swift 파일 저장
    with open(exports_dir / "MelFilterBank.swift", "w") as f:
        f.write(swift_code)
    
    print(f"✅ Swift 코드 생성: {exports_dir / 'MelFilterBank.swift'}")

def verify_mel_filters(mel_filter, sr, n_fft, n_mels):
    """
    생성된 mel 필터 검증
    """
    print(f"\n🔍 Mel 필터 검증:")
    print(f"  - 필터 개수: {len(mel_filter)}")
    print(f"  - 각 필터 길이: {len(mel_filter[0])}")
    print(f"  - 예상 주파수 bin 개수: {n_fft // 2 + 1}")
    
    # 필터 합 확인
    filter_sums = [np.sum(mel_bin) for mel_bin in mel_filter]
    print(f"  - 필터 합 범위: {min(filter_sums):.4f} ~ {max(filter_sums):.4f}")
    
    # 0이 아닌 계수 확인
    non_zero_counts = [np.count_nonzero(mel_bin) for mel_bin in mel_filter]
    print(f"  - 0이 아닌 계수 개수: {min(non_zero_counts)} ~ {max(non_zero_counts)}")
    
    # 주파수 범위 확인
    mel_freqs = librosa.mel_frequencies(n_mels + 2, fmin=0, fmax=sr//2)
    print(f"  - Mel 주파수 범위: {mel_freqs[0]:.1f} ~ {mel_freqs[-1]:.1f} Hz")
    
    print(f"✅ 검증 완료!")

if __name__ == "__main__":
    print("🍉 Mel 필터 Export 스크립트 실행")
    export_mel_filters()
    print("\n🎉 모든 파일 생성 완료!")
    print("Swift 프로젝트에 MelFilterBank.swift 파일을 추가하세요.")