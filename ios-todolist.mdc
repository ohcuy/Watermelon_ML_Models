# 🍉 iOS 수박 당도 측정 앱 개발 - Todo List

## 📱 프로젝트 개요

Core ML 기반 `watermelon_sweetness_predictor.mlmodel`을 활용한 실시간 수박 당도 측정 iOS 앱 개발 프로젝트의 상세 작업 리스트

### 🎯 **최종 목표**

- **정확도**: MAE 0.0974 Brix 성능 유지
- **사용성**: 3초 녹음 → 2초 내 결과 제공
- **플랫폼**: iOS 15.0+, SwiftUI 기반
- **배포**: App Store 출시 준비

---

## ✅ Phase 1: 프로젝트 설정 및 환경 구성

### 🔧 1.1 Xcode 프로젝트 생성

- [ ] **1.1.1** Xcode에서 새 iOS 프로젝트 생성

  - 프로젝트명: `WatermelonSweetness` 또는 `WatermelonSweetnessApp`
  - Interface: SwiftUI
  - Language: Swift
  - Minimum Deployment: iOS 15.0
  - Bundle Identifier: `com.yourteam.watermelonsweetness`

- [ ] **1.1.2** 프로젝트 구조 설정

  ```
  WatermelonSweetnessApp/
  ├── Models/
  ├── ViewModels/
  ├── Views/
  ├── Services/
  ├── Utils/
  ├── Resources/
  └── Tests/
  ```

- [ ] **1.1.3** Git 저장소 초기화 및 .gitignore 설정
  - Xcode 프로젝트용 .gitignore
  - 민감한 정보 제외 설정

### 📱 1.2 Core ML 모델 통합

- [ ] **1.2.1** Core ML 모델 파일 추가

  - `watermelon_sweetness_predictor.mlmodel` 파일을 프로젝트에 드래그 앤 드롭
  - Target Membership 확인
  - 자동 생성된 모델 클래스 확인

- [ ] **1.2.2** 모델 메타데이터 확인

  - 입력 특징 10개 확인
  - 출력 형식 확인 (sweetness_prediction)
  - 모델 버전 및 설명 확인

- [ ] **1.2.3** 기본 모델 테스트
  ```swift
  // 모델 로드 테스트
  let model = try watermelon_sweetness_predictor()
  ```

### 🎵 1.3 오디오 처리 라이브러리 설정

- [ ] **1.3.1** AVFoundation 프레임워크 추가
- [ ] **1.3.2** Accelerate 프레임워크 추가 (DSP 처리용)
- [ ] **1.3.3** 마이크 권한 설정
  ```xml
  <key>NSMicrophoneUsageDescription</key>
  <string>수박 소리를 녹음하여 당도를 측정합니다.</string>
  ```

---

## ✅ Phase 2: 핵심 서비스 개발

### 🎤 2.1 오디오 녹음 서비스 (`AudioRecordingService.swift`)

- [ ] **2.1.1** 기본 녹음 기능 구현

  ```swift
  class AudioRecordingService: ObservableObject {
      @Published var isRecording = false
      @Published var recordingLevel: Float = 0.0
      private var audioRecorder: AVAudioRecorder?
  }
  ```

- [ ] **2.1.2** 녹음 설정 구성

  ```swift
  let audioSettings: [String: Any] = [
      AVFormatIDKey: kAudioFormatLinearPCM,
      AVSampleRateKey: 22050.0,  // ML 모델과 동일한 샘플링 레이트
      AVNumberOfChannelsKey: 1,   // 모노 채널
      AVLinearPCMBitDepthKey: 16,
      AVLinearPCMIsFloatKey: false,
      AVLinearPCMIsBigEndianKey: false
  ]
  ```

- [ ] **2.1.3** 실시간 음성 레벨 모니터링
- [ ] **2.1.4** 녹음 시작/중지 기능
- [ ] **2.1.5** 녹음 파일 임시 저장 및 관리
- [ ] **2.1.6** 에러 처리 (권한 거부, 기기 문제 등)

### 🔊 2.2 오디오 특징 추출 서비스 (`AudioFeatureExtractor.swift`)

- [ ] **2.2.1** 기본 오디오 로딩 함수

  ```swift
  func loadAudioData(from url: URL) -> [Float]?
  ```

- [ ] **2.2.2** 오디오 전처리 파이프라인 구현

  - [ ] **2.2.2.1** 세그멘테이션 (묵음 구간 제거)

    ```swift
    func trimSilence(audioData: [Float], threshold: Float = 0.01) -> [Float]
    ```

  - [ ] **2.2.2.2** 정규화 (-1.0 ~ 1.0 범위)
    ```swift
    func normalizeAudio(audioData: [Float]) -> [Float]
    ```

- [ ] **2.2.3** 10개 핵심 특징 추출 함수 구현

  - [ ] **2.2.3.1** 기본 주파수 (Fundamental Frequency)

    ```swift
    func extractFundamentalFrequency(audioData: [Float]) -> Float
    ```

  - [ ] **2.2.3.2** 멜 스펙트로그램 관련 특징 (5개)

    ```swift
    func extractMelSpectrogramFeatures(audioData: [Float]) -> (median: Float, q75: Float, rms: Float, kurtosis: Float)
    ```

  - [ ] **2.2.3.3** MFCC 계수 (3개: mfcc_5, mfcc_10, mfcc_13)

    ```swift
    func extractMFCCFeatures(audioData: [Float]) -> (mfcc5: Float, mfcc10: Float, mfcc13: Float)
    ```

  - [ ] **2.2.3.4** 스펙트럴 롤오프

    ```swift
    func extractSpectralRolloff(audioData: [Float]) -> Float
    ```

  - [ ] **2.2.3.5** 감쇠율 (Decay Rate)
    ```swift
    func extractDecayRate(audioData: [Float]) -> Float
    ```

- [ ] **2.2.4** AudioFeatures 데이터 모델 구현

  ```swift
  struct AudioFeatures {
      let fundamentalFrequency: Float
      let melSpecMedian: Float
      let spectralRolloff: Float
      let melSpecQ75: Float
      let melSpecRms: Float
      let mfcc5: Float
      let mfcc13: Float
      let melSpecKurtosis: Float
      let decayRate: Float
      let mfcc10: Float
  }
  ```

- [ ] **2.2.5** 통합 특징 추출 함수
  ```swift
  func extractAllFeatures(audioData: [Float]) -> AudioFeatures?
  ```

### 🧠 2.3 ML 예측 서비스 (`MLPredictionService.swift`)

- [ ] **2.3.1** Core ML 모델 로딩 및 관리

  ```swift
  class MLPredictionService: ObservableObject {
      private var model: watermelon_sweetness_predictor?

      init() { loadModel() }
      private func loadModel() { ... }
  }
  ```

- [ ] **2.3.2** 특징 표준화 구현

  ```swift
  struct FeatureStandardizer {
      // Python 모델의 StandardScaler 파라미터
      static let means: [Float] = [/* 10개 평균값 */]
      static let stds: [Float] = [/* 10개 표준편차값 */]

      static func standardize(_ features: AudioFeatures) -> AudioFeatures
  }
  ```

- [ ] **2.3.3** 당도 예측 함수

  ```swift
  func predictSweetness(features: AudioFeatures) async -> PredictionResult?
  ```

- [ ] **2.3.4** PredictionResult 모델 구현

  ```swift
  struct PredictionResult {
      let sweetness: Float        // Brix 값
      let confidence: Float       // 신뢰도
      let level: SweetnessLevel   // 등급
      let timestamp: Date         // 측정 시간
  }
  ```

- [ ] **2.3.5** 당도 등급 분류 로직
  ```swift
  enum SweetnessLevel {
      case poor(Float)      // < 9.0 Brix
      case fair(Float)      // 9.0 - 10.5 Brix
      case good(Float)      // 10.5 - 12.0 Brix
      case excellent(Float) // > 12.0 Brix
  }
  ```

### 💾 2.4 데이터 저장 서비스 (`DataPersistenceService.swift`)

- [ ] **2.4.1** 측정 기록 저장 구조 설계

  ```swift
  struct MeasurementRecord: Codable {
      let id: UUID
      let sweetness: Float
      let level: SweetnessLevel
      let timestamp: Date
      let audioFileURL: URL?
  }
  ```

- [ ] **2.4.2** Core Data 또는 UserDefaults 기반 저장
- [ ] **2.4.3** 측정 기록 CRUD 기능
- [ ] **2.4.4** 임시 오디오 파일 관리
- [ ] **2.4.5** 데이터 내보내기 기능 (CSV, JSON)

---

## ✅ Phase 3: UI/UX 개발

### 🎨 3.1 디자인 시스템 구축

- [ ] **3.1.1** 컬러 팔레트 정의 (`Colors.swift`)

  ```swift
  extension Color {
      static let watermelonGreen = Color(red: 0.2, green: 0.7, blue: 0.3)
      static let watermelonRed = Color(red: 0.9, green: 0.2, blue: 0.3)
      static let watermelonDark = Color(red: 0.1, green: 0.5, blue: 0.2)
  }
  ```

- [ ] **3.1.2** 타이포그래피 정의
- [ ] **3.1.3** 공통 UI 컴포넌트
  - [ ] Custom Button 스타일
  - [ ] Progress Indicator
  - [ ] Alert 스타일
  - [ ] 결과 표시 카드

### 📱 3.2 메인 화면 (`ContentView.swift`)

- [ ] **3.2.1** 탭 바 구조 설정

  ```swift
  TabView {
      RecordingView()
          .tabItem { Label("측정", systemImage: "mic") }
      HistoryView()
          .tabItem { Label("기록", systemImage: "list.bullet") }
      SettingsView()
          .tabItem { Label("설정", systemImage: "gear") }
  }
  ```

- [ ] **3.2.2** 네비게이션 설정
- [ ] **3.2.3** 글로벌 상태 관리

### 🎤 3.3 녹음 화면 (`RecordingView.swift`)

- [ ] **3.3.1** 기본 UI 레이아웃

  - [ ] 수박 이미지/아이콘
  - [ ] 녹음 버튼 (마이크 아이콘)
  - [ ] 상태 표시 텍스트
  - [ ] 진행률 인디케이터

- [ ] **3.3.2** 녹음 상태별 UI 변화

  ```swift
  enum RecordingState {
      case idle           // 대기 상태
      case recording      // 녹음 중
      case processing     // 분석 중
      case completed      // 완료
      case error(String)  // 오류
  }
  ```

- [ ] **3.3.3** 실시간 오디오 레벨 시각화

  - [ ] 파형 애니메이션
  - [ ] 원형 레벨 미터

- [ ] **3.3.4** 사용법 안내 오버레이
- [ ] **3.3.5** 에러 처리 및 사용자 피드백

### 📊 3.4 결과 화면 (`ResultView.swift`)

- [ ] **3.4.1** 당도 값 표시

  - [ ] 큰 숫자로 Brix 값 표시
  - [ ] 당도 등급 (색상 코딩)
  - [ ] 신뢰도 표시

- [ ] **3.4.2** 시각적 표현

  - [ ] 당도 게이지 차트
  - [ ] 진행률 바
  - [ ] 수박 상태 이모지/이미지

- [ ] **3.4.3** 액션 버튼

  - [ ] 다시 측정
  - [ ] 결과 저장
  - [ ] 결과 공유

- [ ] **3.4.4** 측정 팁 및 설명
  ```swift
  func getSweetnessDescription(level: SweetnessLevel) -> String {
      switch level {
      case .poor: return "아직 덜 익었어요. 며칠 더 기다려보세요."
      case .fair: return "보통 정도의 단맛이에요."
      case .good: return "달콤하고 맛있을 거예요!"
      case .excellent: return "매우 달콤해요! 최고의 수박이네요!"
      }
  }
  ```

### 📋 3.5 기록 화면 (`HistoryView.swift`)

- [ ] **3.5.1** 측정 기록 리스트

  - [ ] 날짜별 그룹화
  - [ ] 당도 값 및 등급 표시
  - [ ] 스와이프 삭제 기능

- [ ] **3.5.2** 필터링 및 정렬

  - [ ] 날짜 범위 필터
  - [ ] 당도 범위 필터
  - [ ] 정렬 옵션 (날짜, 당도)

- [ ] **3.5.3** 통계 요약

  - [ ] 평균 당도
  - [ ] 측정 횟수
  - [ ] 최고/최저 당도

- [ ] **3.5.4** 데이터 내보내기 기능

### ⚙️ 3.6 설정 화면 (`SettingsView.swift`)

- [ ] **3.6.1** 앱 설정

  - [ ] 녹음 시간 설정 (3-5초)
  - [ ] 민감도 설정
  - [ ] 단위 설정 (Brix)

- [ ] **3.6.2** 데이터 관리

  - [ ] 기록 삭제
  - [ ] 데이터 내보내기
  - [ ] 캐시 정리

- [ ] **3.6.3** 앱 정보

  - [ ] 버전 정보
  - [ ] 개발자 정보
  - [ ] 오픈소스 라이선스

- [ ] **3.6.4** 도움말 및 튜토리얼

---

## ✅ Phase 4: ViewModel 및 비즈니스 로직

### 🎤 4.1 녹음 ViewModel (`RecordingViewModel.swift`)

- [ ] **4.1.1** ObservableObject 구현

  ```swift
  class RecordingViewModel: ObservableObject {
      @Published var recordingState: RecordingState = .idle
      @Published var audioLevel: Float = 0.0
      @Published var recordingProgress: Double = 0.0
  }
  ```

- [ ] **4.1.2** 녹음 플로우 관리

  ```swift
  func startRecording() async
  func stopRecording() async
  func processAudio() async
  ```

- [ ] **4.1.3** 오디오 서비스 통합
- [ ] **4.1.4** ML 예측 서비스 통합
- [ ] **4.1.5** 에러 처리 및 상태 관리

### 📊 4.2 예측 ViewModel (`PredictionViewModel.swift`)

- [ ] **4.2.1** 예측 결과 상태 관리

  ```swift
  class PredictionViewModel: ObservableObject {
      @Published var currentResult: PredictionResult?
      @Published var isProcessing = false
  }
  ```

- [ ] **4.2.2** 결과 포맷팅 및 표시 로직
- [ ] **4.2.3** 결과 저장 및 공유 기능

### 📋 4.3 기록 ViewModel (`HistoryViewModel.swift`)

- [ ] **4.3.1** 기록 관리 상태

  ```swift
  class HistoryViewModel: ObservableObject {
      @Published var measurements: [MeasurementRecord] = []
      @Published var filteredMeasurements: [MeasurementRecord] = []
  }
  ```

- [ ] **4.3.2** 필터링 및 정렬 로직
- [ ] **4.3.3** 통계 계산 기능
- [ ] **4.3.4** 데이터 CRUD 연동

---

## ✅ Phase 5: 고급 기능 및 최적화

### ⚡ 5.1 성능 최적화

- [ ] **5.1.1** 오디오 처리 최적화

  - [ ] 백그라운드 큐에서 처리
  - [ ] 메모리 사용량 최적화
  - [ ] 실시간 처리 성능 개선

- [ ] **5.1.2** Core ML 예측 최적화

  - [ ] 모델 로딩 최적화
  - [ ] 배치 예측 지원
  - [ ] GPU 가속 활용

- [ ] **5.1.3** UI 응답성 개선
  - [ ] 비동기 처리 강화
  - [ ] 메인 스레드 차단 방지
  - [ ] 애니메이션 최적화

### 🎯 5.2 사용자 경험 개선

- [ ] **5.2.1** 튜토리얼 시스템

  - [ ] 첫 실행 시 가이드
  - [ ] 인터랙티브 도움말
  - [ ] 측정 팁 제공

- [ ] **5.2.2** 피드백 시스템

  - [ ] 햅틱 피드백
  - [ ] 사운드 효과
  - [ ] 시각적 피드백

- [ ] **5.2.3** 접근성 개선
  - [ ] VoiceOver 지원
  - [ ] 다이나믹 타입 지원
  - [ ] 색상 대비 개선

### 🌐 5.3 다국어 지원

- [ ] **5.3.1** 한국어 및 영어 지원
- [ ] **5.3.2** Localizable.strings 파일 작성
- [ ] **5.3.3** 지역별 단위 및 형식 지원

---

## ✅ Phase 6: 테스트 및 품질 보증

### 🧪 6.1 단위 테스트

- [ ] **6.1.1** 오디오 특징 추출 테스트

  ```swift
  func testFundamentalFrequencyExtraction()
  func testMFCCFeatureExtraction()
  func testMelSpectrogramFeatures()
  ```

- [ ] **6.1.2** ML 예측 정확도 테스트

  ```swift
  func testMLModelPrediction()
  func testFeatureStandardization()
  ```

- [ ] **6.1.3** 데이터 저장/로딩 테스트
- [ ] **6.1.4** ViewModel 로직 테스트

### 📱 6.2 UI 테스트

- [ ] **6.2.1** 녹음 플로우 테스트
- [ ] **6.2.2** 결과 표시 테스트
- [ ] **6.2.3** 네비게이션 테스트
- [ ] **6.2.4** 에러 처리 테스트

### ⚡ 6.3 성능 테스트

- [ ] **6.3.1** 녹음-예측 전체 파이프라인 성능 측정

  ```swift
  func testEndToEndPerformance() {
      measure {
          // 3초 녹음 + 2초 내 예측 완료 검증
      }
  }
  ```

- [ ] **6.3.2** 메모리 사용량 테스트
- [ ] **6.3.3** 배터리 소모 테스트
- [ ] **6.3.4** 다양한 기기에서 테스트

### 🎵 6.4 실제 오디오 테스트

- [ ] **6.4.1** 다양한 수박 소리로 테스트
- [ ] **6.4.2** 노이즈 환경에서 테스트
- [ ] **6.4.3** 거리별 녹음 테스트
- [ ] **6.4.4** 실제 당도와 비교 검증

---

## ✅ Phase 7: 배포 준비

### 📋 7.1 앱스토어 준비

- [ ] **7.1.1** 앱 아이콘 디자인 및 적용

  - [ ] 1024x1024 앱스토어 아이콘
  - [ ] 다양한 크기별 아이콘 세트

- [ ] **7.1.2** 스크린샷 제작

  - [ ] iPhone 다양한 크기별 스크린샷
  - [ ] iPad 스크린샷 (선택사항)
  - [ ] 한국어/영어 버전

- [ ] **7.1.3** 앱 설명 작성

  ```
  🍉 AI 기반 수박 당도 측정기

  ✨ 주요 기능:
  • 수박을 두드린 소리로 당도 측정
  • 최첨단 머신러닝 기술 적용
  • 98.87% 정확도의 당도 예측
  • 간편한 원터치 측정
  • 측정 기록 관리

  🎯 사용법:
  1. 수박을 가볍게 두드리기
  2. 앱에서 녹음 버튼 터치
  3. 3초간 소리 녹음
  4. 당도 결과 확인
  ```

### 🔐 7.2 보안 및 프라이버시

- [ ] **7.2.1** 프라이버시 정책 작성
- [ ] **7.2.2** 데이터 수집 최소화
- [ ] **7.2.3** 개인정보 처리 방침 준수
- [ ] **7.2.4** 앱 투명성 보고서 작성

### 📊 7.3 분석 및 모니터링 (선택사항)

- [ ] **7.3.1** Firebase Analytics 통합
- [ ] **7.3.2** 크래시 리포팅 설정
- [ ] **7.3.3** 성능 모니터링 설정
- [ ] **7.3.4** 사용자 피드백 수집 시스템

---

## ✅ Phase 8: 출시 및 유지보수

### 🚀 8.1 베타 테스트

- [ ] **8.1.1** TestFlight 베타 배포
- [ ] **8.1.2** 베타 테스터 모집 (친구, 가족)
- [ ] **8.1.3** 피드백 수집 및 개선
- [ ] **8.1.4** 실제 사용 시나리오 테스트

### 📱 8.2 앱스토어 출시

- [ ] **8.2.1** App Store Connect 등록
- [ ] **8.2.2** 심사 제출
- [ ] **8.2.3** 심사 통과 및 출시
- [ ] **8.2.4** 출시 후 모니터링

### 🔄 8.3 지속적 개선

- [ ] **8.3.1** 사용자 리뷰 모니터링
- [ ] **8.3.2** 버그 수정 및 업데이트
- [ ] **8.3.3** 새로운 기능 개발
  - [ ] 다른 과일 지원
  - [ ] Apple Watch 앱
  - [ ] 소셜 기능
  - [ ] AR 기능

---

## 📊 성공 지표 및 목표

### 🎯 **기술적 목표**

- **정확도**: ML 모델 성능 MAE 0.1 Brix 이하 유지
- **속도**: 녹음 → 결과 제공 5초 이내
- **안정성**: 크래시율 0.1% 이하
- **호환성**: iOS 15.0+ 모든 기기 지원

### 📱 **사용자 경험 목표**

- **사용 편의성**: 3단계 이내 측정 완료
- **정확성**: 실제 당도와 ±0.5 Brix 오차 범위
- **만족도**: 앱스토어 평점 4.0+ 목표
- **재사용률**: 주간 활성 사용자 70%+

### 🏆 **비즈니스 목표**

- **다운로드**: 첫 달 1,000+ 다운로드
- **리뷰**: 긍정적 리뷰 80%+
- **미디어 노출**: 기술 블로그/뉴스 소개
- **확장**: 다른 과일로 기능 확장 가능성

---

## 🚧 주요 도전과제 및 해결방안

### 🎵 **오디오 처리 관련**

**도전과제**: iOS에서 복잡한 오디오 특징 추출
**해결방안**:

- Accelerate 프레임워크 활용
- 핵심 특징만 선별 구현
- 성능 최적화 집중

### 🤖 **ML 모델 통합**

**도전과제**: Python 모델의 정확한 재구현
**해결방안**:

- StandardScaler 파라미터 정확히 이식
- 특징 추출 알고리즘 검증
- 예측 결과 비교 테스트

### 📱 **사용자 경험**

**도전과제**: 복잡한 기술을 간단한 UX로 제공
**해결방안**:

- 직관적인 UI 디자인
- 명확한 사용법 안내
- 즉각적인 피드백 제공

---

**🎉 이 Todo List를 단계별로 완료하여 혁신적인 수박 당도 측정 iOS 앱을 성공적으로 출시하세요! 🍉📱**
description:
globs:
alwaysApply: false

---
